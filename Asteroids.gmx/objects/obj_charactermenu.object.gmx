<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menuarrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characters[0] = spr_player_redgunship;
characters[1] = spr_player_blue;
characters[2] = spr_player_red;
characters[3] = spr_player_yellow;

//the amount of space you want between each menu item
space = 64;

//this variable keeps track of where our cursor is on the menu
menuPosn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code allows us to move up and down the menu with the cursor
var move = 0;
move -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(ord("W")), 0);
move += max(keyboard_check_pressed(vk_right),keyboard_check_pressed(ord("S")), 0);

//menuPosn from the Create event
if (move != 0) {
    menuPosn += move;
    if (menuPosn &lt; 0) {
        //take it to the end of the menu
        menuPosn = array_length_1d(characters) - 1;
    }
    else if (menuPosn &gt; array_length_1d(characters) - 1) {
        //take it to the start of the menu
        menuPosn = 0;
    }
}

//selecting a menu option
var push;
push = max(keyboard_check_pressed(vk_enter), keyboard_check_pressed(vk_space), 0);

if (push == 1) {
    //a key has been pressed. Run the menu script
    scr_charactermenu();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//loop through the characters array and draw each character-select sprite
var m;
for (m = 0; m &lt; array_length_1d(characters); m += 1) {
    draw_sprite(characters[m], image_index, x + (m * space), y + space);
}

//draw the arrow
draw_sprite(sprite_index, image_index, x + (menuPosn * space), y + 16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
